// <auto-generated />
using System;
using FootballManager.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FootballManager.Infrastructure.Data.Migrations
{
    [DbContext(typeof(FootballManagerContext))]
    [Migration("20210502151215_InitialModel")]
    partial class InitialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.HasSequence("Formation_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("player_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("Team_hilo")
                .IncrementsBy(10);

            modelBuilder.Entity("FootballManager.Domain.Entities.ActivePlayerStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("ActivePlayerStatus");
                });

            modelBuilder.Entity("FootballManager.Domain.Entities.Formation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Formation_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("FormationType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ParentTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentTeamId");

                    b.ToTable("Formation");
                });

            modelBuilder.Entity("FootballManager.Domain.Entities.FormationPostition", b =>
                {
                    b.Property<int>("PositionNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FormationId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("PositionNo");

                    b.HasIndex("FormationId");

                    b.HasIndex("PlayerId");

                    b.ToTable("FormationPostition");
                });

            modelBuilder.Entity("FootballManager.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "player_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PreferredFoot")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FootballManager.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Team_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("FoundedIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FootballManager.Domain.Entities.ActivePlayerStatus", b =>
                {
                    b.HasOne("FootballManager.Domain.Entities.Player", "Player")
                        .WithMany("Statuses")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballManager.Domain.Entities.Formation", b =>
                {
                    b.HasOne("FootballManager.Domain.Entities.Team", "ParentTeam")
                        .WithMany()
                        .HasForeignKey("ParentTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentTeam");
                });

            modelBuilder.Entity("FootballManager.Domain.Entities.FormationPostition", b =>
                {
                    b.HasOne("FootballManager.Domain.Entities.Formation", null)
                        .WithMany("Postitions")
                        .HasForeignKey("FormationId");

                    b.HasOne("FootballManager.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballManager.Domain.Entities.Player", b =>
                {
                    b.HasOne("FootballManager.Domain.Entities.Team", "CurrentTeam")
                        .WithMany("Rooster")
                        .HasForeignKey("CurrentTeamId");

                    b.Navigation("CurrentTeam");
                });

            modelBuilder.Entity("FootballManager.Domain.Entities.Formation", b =>
                {
                    b.Navigation("Postitions");
                });

            modelBuilder.Entity("FootballManager.Domain.Entities.Player", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("FootballManager.Domain.Entities.Team", b =>
                {
                    b.Navigation("Rooster");
                });
#pragma warning restore 612, 618
        }
    }
}
